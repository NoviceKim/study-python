list
    여러 개의 저장공간이 나열되어 있는 것
        -> 데이터가 들어 있는 칸(데이터 하나 = 저장공간 하나)이 '여러 개' 나열되어 있는 형태


        list명 = [값1, 값2, ...] 같은 형태로 list 생성 시,
        RAM에서 list명이라는 이름의 공간 하나와
        그와 별개로 해당 list의 값이 들어 있는 칸들(데이터 당 하나)이 일렬로 생성된다.

        여기서 'list명'은 기본적으로 list의 0번 인덱스의 주소를 참조하며,
        이는 *list명(0) 으로 나타낼 수 있다.
        파이썬은 C언어 기반이므로, *는 주소 값을 의미한다.

        다른 인덱스의 주소를 참고하고 싶다면 *list명(0 + i)의 형태로 쓸 수 있다.

        유의할 점은, 각 칸 별로 다른 주소값이 생성되기 때문에,
        주소값이 저장되어 있는 칸도 해당 데이터 수만큼 생성된다는 것이다.

        하지만, 여기서 * (+ i)를 축약할 수 있는데,
        바로 *list명(0 + i) 를 list명[i] 형식으로
        대괄호를 사용하는 것이다.

        데이터의 흐름을 파악하도록 하자.


    사용 목적
        1. 여러 번 선언하지 않고 한 번만 선언하기 위해서 사용
        2. 규칙성 없는 칸에 규칙성을 부여하기 위해서 사용


list 선언 방식
    1. list명 = [값1, 값2, ...]
        -> 어떤 값을 넣어야 할 지 알고 있을 때

    2. list명 = [값] * 칸 수
        -> 어떤 값을 넣어야 할 지 모르지만, 몇 칸이 필요한 지는 알 때

    3. list명 = [] * 칸 수
        -> 어떤 값을 넣을 지도, 몇 칸이 필요한 지도 모를 때

    4. list명 = list(range(start, end, step))
        -> range 타입으로 생성 후, list 타입으로 형 변환


list의 길이
    len(list명)
        -> 해당 list의 길이


list의 사용
    data_list = [1, 2, 3]

    - 값 넣기

        - 추가
            list명.append(값)

                ex) data_list.append(4) -> [1, 2, 3, 4]
                    -> 기존 list를 복사한 다음, 해당 값을 복사한 list의 맨 마지막에 붙임
                        복사 이전의 list는 메모리에서 삭제.
                        쓸 때마다 복사/삭제가 이루어지기 때문에, 자주 쓰면 성능이 떨어질 수 있음


        - 삽입
            list명.insert(인덱스 번호, 값)

                ex) data_list.insert(1, 1.5) -> [1, 1.5, 2, 3, 4]
                    -> 해당 인덱스에 값을 추가하고,
                        기존에 해당 인덱스에 있던 값과 그 뒤쪽 칸의 값들은 한 칸씩 오른쪽으로 밀림


    - 값 삭제
        list명.remove(값)
            - 값 중복 시 먼저 나온(인덱스 번호가 낮은) 값이 삭제

        del(list명[인덱스 번호])
        del list명[인덱스 번호]
            - 해당 인덱스에 있는 값 삭제

        list명.clear
            - 해당 list의 모든 값 삭제


    - 값 검색
        list명.index(값)
            해당 값이 들어있는 저장공간의 인덱스 번호를 검색
            값이 중복된다면, 먼저 나온(인덱스 번호가 낮은)값의 번호를 반환


    - 값 수정
        list명[인덱스 번호] = 새로운 값
            해당 인덱스에 새로운 값 할당