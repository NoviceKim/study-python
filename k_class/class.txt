- 클래스(class, 반)
    공통 요소를 딱 한 번만 선언 -> 이게 목적

    1. 타입이다 = 기존에 쓰던 int, str 같은 것
        클래스 안에 선언된 변수와 메소드(함수)를 쓰고 싶다면,
        해당 클래스 타입으로 변수를 선언해야 한다.

    2. 주어다
        ex) 원숭이가 바나나를 먹는다.
            -> 여기서의 주어는 '원숭이'

        - Monkey.eat("바나나")
            -> 클래스 이름은 무조건 대문자로 시작한다.


- 클래스 선언 방식

    class 클래스명:
        필드(변수, 메소드) - 클래스 안에 있는 모든 것들의 총칭


- 클래스의 필드를 사용하는 방법
    1. 객체화(instance)
        추상적인 개념을 구체화하는 작업
        객체(instance variable)를 만드는 작업

        ex) 도형 - 추상적 개념
            세모 - 구체적 개념
            -> '도형' 이라는 추상적 개념에서
                '세모' 라는 구체적인 개념을 여러 가지 고유 특징을 통해 구체화

    2.

- 생성자
    클래스 이름 뒤에 소괄호가 있는 형태
    메소드와 기능은 쪽같지만, 엄밀히 따지면 메소드가 아님.

    메소드랑 다 똑같은데, 딱 한 가지가 다르기 때문.
    바로 return 기능이 없다는 것.

    생성자는 할당한 필드의 주소를 자동으로 리턴하기 때문에
    선언할 때 리턴 기능을 사용할 수 없다.

- 기본 생성자
    매개변수가 없는 생성자
    클래스 선언 시 자동으로 선언됨.

    만약 사용자가 직접 생성자를 선언하게 되면, 기본 생성자가 자동 생성되지 않는다


- self
    필드에 접근한 객체가 누구인지 알아야, 해당 객체의 필드에 접근할 수 있다.
    이 때, 접근한 객체가 가지고 있는 필드의 '주소값'이 self 라는 변수에 자동으로 담긴다.