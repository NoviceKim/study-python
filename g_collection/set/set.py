# 중복도 없고, 순서도 없다

# 1. 기존에 있던 값을 또 집어넣으려고 하면, 아예 들어가지 않음
# 2. 요소의 순서가 따로 없기 떄문에, 순서에 따른 값 검색은 불가능
# 그럼에도 쓰는 이유 -> 그냥 그 값이 있는지 없는지만 확인하기 위해

# 중괄호 = set (x)
# dict도 중괄호로 묶기 때문에 혼동하지 말 것
world_set = {'korea', 'america', 'japan', 'china'}

print(type(world_set))

print(len(world_set))

# 순서가 없기 떄문에 인덱스로 데이터 가져오는 건 안 됨
# 인덱스로 가져오고 싶다면 list로 형변환
# print(world_set[1])

# 기존에 있는 값을 추가하려고 하면, 그 데이터는 추가되지 않는다
# 코드에서 오류는 따로 발생하지 않음
world_set.add('korea')

# set의 값 출력 로직
# 1. set을 다른 자료형으로 변환한 뒤,
# 2. 그 내용물을 str(문자열)로 푼 다음, 중괄호({})로 묶어서 출력

# 순서가 따로 없기 때문에, 출력할 때마다 문자열 순서가 바뀜
print(world_set)

# 코딩 테스트 예제 - 리스트 내 중복 제거
# set을 활용하면 간단한 코드로도 구현 가능
datas = [1, 1, 3, 2, 3, 4, 1, 4, 4]

# 1. datas 리스트를 set로 형변환 - 이 때 중복 요소들이 바로 삭제됨
# 2. 순서에 맞게 출력하기 위해, 다시 list로 형변환
# list는 순서가 있기 때문에, 시스템 내부에서 자동으로 정렬되어 출력된다 - [1, 2, 3, 4]
# 이처럼 set은 중복된 요소를 제거할 때 효과적이다
print(list(set(datas)))