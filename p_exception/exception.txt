- 예외 처리 -
    프로그램 실행 중 오류 발생 시 강제 종료되기 때문에
    이를 막기 위해서 예외 처리를 작성한다.

    제어문으로 오류를 막을 수 없다면 반드시 예외 처리를 작성해야 한다.


- try, except -

    1.
        try:
            오류가 발생할 수 있는 문장

        except 발생오류 as 오류객체:        -> '오류객체' 라는 건, 여기서 발생한 오류는 '클래스' 라는 의미다.
            오류 발생 시 실행할 문장

        ...


    2.
        try:
            오류가 발생할 수 있는 문장

        except 발생오류:              -> 객체의 주소가 어딘가에 담겨있지만, 그 안을 확인할 필요가 없을 때
            오류 발생 시 실행할 문장

        ...


    3.
        try:
            오류가 발생할 수 있는 문장

        except:                     -> 어떤 유형(클래스)의 오류가 발생하더라도 여기에 들어온다.
            오류 발생 시 실행할 문장

        ...

        finally:
            오류 발생 여부와 관계없이 실행       -> 에러를 잡아도 실행되고,
                                               에러가 떠서 강제종료 되더라도 실행된다.


- 예외 발생시키기 -
    목적 1. 심각한 오류가 발생하기 전, 일부러 프로그램을 강제종료 시킬 때
    목적 2. 예외를 한 곳에 묶어서 처리하기 위해(상위 과정에서 다룰 예정)

    raise 발생오류


- 예외 만들기 -
    class 오류명(Exception):
        def __str__(self):
            return "오류 메세지"