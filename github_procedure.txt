- Github 연동 작업 순서 -

1. python/workspace 파일 우클릭하고 추가 옵션 표시 - Open Git Bash Here 클릭

    * 경로 제대로 확인할 것!!


2. git branch 명령어로 현재 브랜치 목록 확인

    * 아마 'master' 라고 되어있는 거 하나만 있을 것


3. git checkout -b (브랜치명) 으로 새로운 브랜치 생성하면서, 거기로 이동

    * master 브랜치에서 작업하지 말 것. 지금은 혼자 하는 거라 큰 상관은 없겠지만,
      나중에 협업이나 프로젝트 할 때는 이거 지키는 게 매우 중요함

    * 현재 master 브랜치 상태를 기준으로 생성했으니, 그 로그 내용이 그래도 복사됨.
      작업은 여기서 진행


4. git status 입력해서 스테이징 해야 되는 파일 리스트 확인

    * 혹시 모르니, 무턱대고 바로 git add .(전부 스테이징) 하지는 말고, 파일 리스트 한 번 확인

    * git init은 처음에 했으니, 다음에 또 할 필요는 없음.
      단, workspace 파일에 숨은 파일까지 봤을 때, .git 이 없다면 git init 실행
      -> git과 연동하기 위함. 다시 한 번 말하지만, 제발 경로 제대로 확인 할 것!


5. git add . 실행

    * 새로 생겼거나, 내용이 수정된 파일이 전부 스테이징 됨

    * git status 입력해서 'No commits yet' 문구와,
      초록색 글자로 뜨는 (commit 할)파일 리스트 제대로 되어있는지 확인


6. git commit -m "메세지" 로 해당 브랜치에 커밋

    * 메세지 내용은 되도록 영어로, 어떤 작업을 했는지 기록할 것

    * git status 로 로그 확인하면 좋음


7. git checkout master 명령어 입력해서 master 브랜치로 이동

    * 작업은 3번 과정으로 만든 브랜치에서 했으니, master에는 기록이 없을 것


8. git merge (브랜치명) 으로 해당 브랜치에 있는 작업 내역(로그) 전부 가져오기


9. Github 사이트 들어가서, 내 레포지토리 안의 초록색 'Code' 버튼 누르면 나오는 https 주소 복사


10. git remote add origin (9에서 복사한 주소) 입력해서, Github 레포지토리랑 연결

    * 9번 과정에서 복사한 주소를 'origin' 이라는 이름의 원격 저장소로 쓰겠다는 의미

    * Git Bash 안에서의 붙여넣기는 Shift + Insert.
      기존에 쓰던 Ctrl + V 안 먹히니 주의.


11. git remote -v 로 원격 저장소 제대로 만들어졌는지 확인


12. git push origin master 로 Github에 있는 레포지토리에 수정사항 push 하기

    * origin 은 위에서 말한 대로 내 레포지토리의 https 주소고,
      master 는 그 레포지토리 안 master 브랜치(로컬 브랜치랑 다름!)를 의미.

    * 레포지토리 쪽 master 브랜치는 없다면 새로 생성됨


13. Github 레포지토리 들어가서 수정사항 제대로 적용됐는지 확인


- Github 사이트에서 코드 수정한 거 가져오기 -

14. 마찬가지로 Git Bash 열고, 다시 10번 과정으로 레포지토리랑 연결

    * 전에 열려있던 Git Bash 쓰는거면 안 해도 됨


15. git pull origin master 입력

    * 여기서의 master 브랜치는 로컬(내 컴퓨터) 내의 master 브랜치를 의미


16. 수정 사항 제대로 적용됐는지 확인하고, checkout 명령어로 3에서 만든 브랜치로 이동

    * 없으면 checkout -b 로 만들 것


17. git merge main 으로 Github에서 수정 한 거 가져오기

    * 16번 과정에서 없어서 새로 만들었다면 할 필요 없음


- 그 밖의 주의 사항 -

- add . -> merge -> push / pull 정도만 하면 되는 단순한 작업이지만,
  실수 방지를 위해 중간중간 git status 랑 git log 사용할 것


- 내 컴퓨터 / Github 중 어느 한쪽에서 작업했다면 반드시 동기화 할 것.
  절대 양쪽에서 다, 특히 같은 파일을 다른 방식으로 수정한 다음 push / pull 하려고 하지 말 것.
  이 경우에는 무조건 충돌이 발생하기 때문에,
  다시 말하지만 한 쪽에서 작업(이 파일 포함)이 끝날 때마다 push / pull 하는 거 까먹지 말 것!


- 모든 새 텍스트 파일은 작성이 끝난 다음, 'push 부터 한 다음에'
  Github 레포지토리 안 README 옆 수정 버튼 눌러서
  작성한 파일 Ctrl + A / Ctrl + C 로 전체 복사 하고, 페이지 맨 아래에 2줄 띄어서 붙여넣기


- 위 과정이 끝나면 레포지토리 쪽 README.md 파일이 수정되었을 것.
  pull로 가져오기.

- 기타 문제나 모르는 게 생기면 강사님께 문의