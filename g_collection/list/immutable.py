# 'copy' 라이브러리를 이 파일(immutable.py)로 가져옴
import copy


# 얕은 복사는 기존 값을 복사해서 새롭게 만들어 내는 것을 의미
# 그걸 새로운 주소에 할당하기 떄문에, 불변성이 보장된다
# 기존 데이터의 주소는 그대로 유지되기 때문에, 복사한 게 수정되든 말든 기존 데이터는 바뀌지 않음
datas = [1, 2, 3]

# datas를 처음부터 끝까지 가져와서, 아예 다른 리스트(datas_copy)를 만든다 - 슬라이싱은 얕은 복사를 지원한다
datas_copy = datas[:]

# datas에 대하여 얕은 복사 실행 - copy 라이브러리에 있는 기능을 가져와서(import) 실행
# datas_copy = copy.copy(datas)

# datas가 datas_copy 인가?
# True - 하나가 바뀌면 다른 것도 바뀜
# False - 하나가 바뀌어도 나머지는 영향 없음
print(datas is datas_copy)

# but, [1, [1, 2, 3], [4, 5, 6]] 같이 안에 또다른 주소값을 가지는 자료(리스트 등)가 있는 경우...
# 해당 자료의 복사본을 만들고, 복사본 안에 있는 리스트를 수정했을 때, 원본&복사본 양쪽이 다 수정됨
# 이처럼, 얕은 복사는 안에 있는 데이터 묶음까지 별개로 떼어놓은 것은 불가
# 얕은 복사는, 두 번째 접근부터는 불변성을 보장하지 않는다


# 깊은 복사
# 사용 시, 깊은 접근까지도 모두 불변성이 보장된다
# 단, 너무 깊은 구조(리스트 안에 리스트 안에 리스트...)에서 사용할 때는 메모리 소모량이 그만큼 커지기 때문에
# 불변성이 보장될 필요가 없으면 사용하지 않는 게 좋다
datas = [1, [1, 2, 3], [4, 5, 6]]

# 라이브러리에서 가져온 기능으로 깊은 복사
datas_copy = copy.deepcopy(datas)
