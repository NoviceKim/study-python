클로저(closure, 폐쇄): 함수 안에 함수, 모듈화
    close(닫다)에서 파생된 단어

    함수가 정의된 시점에서 변수를 기억하고,
    이 변수를 나중에 참조 또는 변경이 가능하도록 해준다.

    내부 영역에 선언된 변수는 외부에서 접근이 불가능하기 때문에 데이터 은닉을 할 수 있으며,
    함수가 종료된 이후에도 지역변수에 접근할 수 있기 때문에 데이터 지속성도 가지고 있다.

        -> 지역변수처럼 밖에서 볼 수는 없지만,
            전역변수처럼 메모리에 남기 때문에 계속 호출해서 쓸 수 있다?


    또한, 다른 함수를 인자로 받거나 리턴할 수 있는 함수형 프로그래밍이 가능해진다.

        -> 함수 안에 함수가 있는 코드가 있다고 생각해봅시다.

            바깥쪽에 해당하는 함수를 사용하면, 그 리턴으로 안쪽 함수가 나온다고 가정.

            그러면 그 아랫줄부터 바깥쪽 함수에 대한 값을 사용할 수 있을 것이고,
            이 때, 안쪽 함수에 대한 것도 사용이 가능해지는 것.
            안쪽 함수만 따로 불러서 쓸 수도 있고.

            but, 바깥쪽 함수를 아직 쓰지도 않았는데 안쪽 함수만 따로 불러서 쓰는 건 당연히 안 됨.


    하지만 코드 복잡성이 증가하고, 지역변수에 대한 정보가 메모리에 남기 때문에
    메모리 사용량이 늘어날 수 있다.


클로저 구현 코드

    def out(arg):
        local_variable = 값

        def inner(arg):
            # read local_variable   -> inner 함수 밖의 값을 읽어올 수 있다는 의미
            value = 암거나 연산

            return value    -> 없을 수도 있음

        return inner    -> inner() 함수를 리턴했고, 이 함수를 값처럼 쓸 수 있음


* 앞으로의 과정
Git(기초), Github
DBMS
파이썬 - DBMS 연동
HTML
CSS
클론 코딩
Javascript
클론 코딩
파이썬 웹 개발(Django 프레임워크)
데이터 분석 in 파이썬(numpy, pandas 라이브러리)
머신러닝(분류, 회귀, 군집)
딥러닝(이미지, 영상 분석)